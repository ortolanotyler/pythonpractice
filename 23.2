#01


def product(a, b):
    """Return product of a and b.

        >>> product(2, 2)
        4

        >>> product(2, -2)
        -4
    """

    return a * b

#02
def weekday_name(day_of_week):
    # Define a list of weekday names
    days_of_week = [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
    ]

    # Check if the provided day_of_week is within the valid range
    if 1 <= day_of_week <= 7:
        # Return the corresponding weekday name
        return days_of_week[day_of_week - 1]

    # Return None for days not between 1 and 7
    return None

# Test cases
print(weekday_name(1))  # 'Sunday'
print(weekday_name(7))  # 'Saturday'
print(weekday_name(9))  # None
print(weekday_name(0))  # None


#03
def last_element(list):

    if list:
        return list[-1]
    
#04
def number_compare(a, b):
    if a > b:
        return "First greater"
    elif b > a:
        return "Second greater"
    else:
        return "Nums equal"
    
#05
def reverse_str(strizz):
    return strizz[::-1]

#06
def single_letter_counter(word,char):
    return word.lower().count(char.lower())

#07 Multiple Letter Count
def multiple_letter_count(phrase):
    # Create an empty dictionary to store letter frequencies
    letter_count = {}

    # Iterate through the characters in the phrase
    for char in phrase:
        # If the character is already in the dictionary, increment its count
        if char in letter_count:
            letter_count[char] += 1
        # If the character is not in the dictionary, add it with a count of 1
        else:
            letter_count[char] = 1

    # Return the dictionary containing letter frequencies
    return letter_count

# Test cases
print(multiple_letter_count('yay'))   # {'y': 2, 'a': 1}
print(multiple_letter_count('Yay'))   # {'Y': 1, 'a': 1, 'y': 1}

#08 List Manipulation
def list_manipulation(lst, command, location, value=None):
    if command == "remove":
        if location == "end":
            return lst.pop()
        elif location == "beginning":
            return lst.pop(0)

    elif command == "add":
        if location == "beginning":
            lst.insert(0, value)
            return lst
        elif location == "end":
            lst.append(value)
            return lst

    return None

#09 Is Palindrome 
def palindrome_checker(string):
    return (string == reverse_str(string).replace(" ",""))

#10 Frequency of term in list
def frequency_of_term(list_, term):
    return len([x for x in list_ if str(x)==str(term)])

#11 flip the case of characters
def flip_case(phrase, to_swap):
    to_swap = to_swap.lower()
    out = ""

    for ltr in phrase:
        if ltr.lower() == to_swap:
            ltr = ltr.swapcase()
        out += ltr

    return out

#12 multiply even numbers
def multiply_even_numbers(nums):
    result = 1

    for num in nums:
        if num % 2 == 0:
            result *= num

    return result

#13 Capitalize 
def capitalizer(phrase):
    return phrase.capitalize();

#14 Compact 
def compactify(lst):
    return [item for item in set(lst)]
#used a set here to remove dupes

#15 Intersection
def intersection(l1, l2):
    set2 = set(l2)
    return [val for val in l1 if val in set2]

#16 Partition
def partition(lst, fn):
    true_list = []
    false_list = []

    for val in lst:
        if fn(val):
            true_list.append(val)
        else:
            false_list.append(val)

    return [true_list, false_list]

#17 Mode
def mode(nums):
    counts = {}

    for num in nums:
        counts[num] = counts.get(num, 0) + 1

    max_value = max(counts.values())

    for num, freq in counts.items():
        if freq == max_value:
            return num
        
#18 Calculate 
def calculate(operation, a, b, make_int=False, message='The result is'):
    if operation == "add":
        result = a + b
    elif operation == "subtract":
        result = a - b
    elif operation == "multiply":
        result = a * b
    elif operation == "divide":
        result = a / b
    else:
        return None

    if make_int:
        result = int(result)

    return f"{message} {result}"

#19 Friend Date 
def friend_date(a, b):
    if set(a[2]) & set(b[2]):
        return True
    else:
        return False
    
#20 3x filter
def triple_and_filter(nums):
    return [num * 3 for num in nums if num % 4 == 0]



#21 Name Extractor 5000
def extract_full_names(people):
    return [f"{person['first']} {person['last']}" for person in people]



#22 sumfloats
def sum_floats(nums):
    return sum([num for num in nums if isinstance(num, float)])


#23 list check 
def list_check(lst):
    for item in lst:
        if not isinstance(item, list):
            return False

    return True

#24 Remove Every Other 
def remove_every_other(lst):
    return lst[::2]
#25 SumPairs of Nums w goal 
def sum_pairs(nums, goal):
    already_visited = set()

    for i in nums:
        difference = goal - i

        if difference in already_visited:
            return (difference, i)

        already_visited.add(i)

    return ()
#26 Vowel Count 

VOWELS = set("aeiou")

def vowel_count(phrase):
    phrase = phrase.lower()
    counter = {}

    for ltr in phrase:
        if ltr in VOWELS:
            counter[ltr] = counter.get(ltr, 0) + 1

    return counter

#27 Titelize it 
def titleize(phrase):
    # Using the built-in title() method
    return phrase.title()

#28 factors
def find_factors(num):
    factors = [n for n in range(1, num + 1) if num % n == 0]
    return factors

#29 including 

def includes(collection, sought, start=None):
    if isinstance(collection, dict):
        return sought in collection.values()

    if start is None or isinstance(collection, set):
        return sought in collection

    return sought in collection[start:]

#30 repeating 
def repeat(phrase, num):
    if not isinstance(num, int) or num < 0:
        return None

    return phrase * num

#31 Truncate 
def truncate(phrase, n):
    if n < 3:
        return "Truncation must be at least 3 characters."

    if n > len(phrase) + 2:
        return phrase

    return phrase[:n - 3] + "..."

#32 def two_list_dictionary(keys, values):
    out = {}

    for idx, val in enumerate(keys):
        out[val] = values[idx] if idx < len(values) else None

    return out

#33 sum range
def sum_range(nums, start=0, end=None):
    if end is None:
        end = len(nums)

    return sum(nums[start:end + 1])
#34 frequency 

def freq_counter(coll):
    counts = {}

    for x in coll:
        counts[x] = counts.get(x, 0) + 1

    return counts

def same_frequency(num1, num2):
    return freq_counter(str(num1)) == freq_counter(str(num2))

#35 two oldest ages
def two_oldest_ages(ages):
    uniq_ages = set(ages)
    oldest = sorted(uniq_ages)[-2:]
    return tuple(oldest)

#36 find dupe 

def find_the_duplicate(nums):
    seen = set()

    for num in nums:
        if num in seen:
            return num
        seen.add(num)

#37 Diagonals 

def sum_up_diagonals(matrix):
    total = 0

    for i in range(len(matrix)):
        total += matrix[i][i]
        total += matrix[i][-1 - i]

    return total
#38 minmaxkeys
def min_max_keys(d):
    keys = d.keys()
    return (min(keys), max(keys))
 #39 greaternums

 def find_greater_numbers(nums):
    count = 0

    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[j] > nums[i]:
                count += 1

    return count
